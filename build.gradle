//plugins {
//    id "com.jfrog.bintray" version "1.7"
//}


apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'


mainClassName='mygame.Main'
//Properties properties = new Properties()
//properties.load(project.rootProject.file('local.properties').newDataInputStream())


/*
 * Gets the version name from the latest Git tag
 */
//def getVersionName = { ->
//    def stdout = new ByteArrayOutputStream()
//    exec {
//        commandLine 'git', 'describe', '--tags'
//        standardOutput = stdout
//    }
//    return stdout.toString().trim()
//}


//bintray {
//    user = properties.getProperty("bintray.user")
//    key = properties.getProperty("bintray.apikey")
//
//    configurations = ['archives']
//    pkg {
//        repo = "maven"
//        name = "jME3-Companion"
////        websiteUrl = ""
////        vcsUrl = "https://github.com/jvpichowski/jME3-Companion"
////        licenses = ["BSD 3-Clause"]
////        publish = true
//        version {
//            name = getVersionName()//'prealpha'
////            desc = 'jME3.1 Companion prealpha'
////            vcsTag = 'prealpha'
//     //       attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
//        }
//    }
//}

repositories {
    jcenter()
}

ext.jmeVersion = "[3.1,)" 

project(":assets") {
    apply plugin: "java"
    
    buildDir = rootProject.file("build/assets")
    
    sourceSets {
        main {
            resources {
                srcDir '.'
            }
        }
    }    
}


dependencies {
 
    compile "org.jmonkeyengine:jme3-core:$jmeVersion"
    compile "org.jmonkeyengine:jme3-desktop:$jmeVersion"
    compile "org.jmonkeyengine:jme3-lwjgl:$jmeVersion"
    
    runtime project(':assets')    
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

task createDirs << {
    
    def pkg = 'mygame'
    def dirs = [
        file("./src/main/java/$pkg"),
        file("./src/main/resources"),
        file("./assets/Interface"),
        file("./assets/MatDefs"),
        file("./assets/Materials"),
        file("./assets/Models"),
        file("./assets/Scenes"),
        file("./assets/Shaders"),
        file("./assets/Sounds"),
        file("./assets/Textures"),    
    ]
    
    dirs.each {
        if( !it.exists() ) {
            println "Creating " + it
            it.mkdirs()
        }
        if( it.listFiles().length == 0 ) {
            def stub = new File(it, 'removeme.txt') 
            println "Creating stub file to allow git checkin, file:$stub"
            stub.text = "Remove me when there are files here."
        }
    }
}


